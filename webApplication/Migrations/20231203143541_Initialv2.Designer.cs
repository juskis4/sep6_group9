// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using webApplication.Data;

#nullable disable

namespace webApplication.Migrations
{
    [DbContext(typeof(MovieDataContext))]
    [Migration("20231203143541_Initialv2")]
    partial class Initialv2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("webApplication.Models.Director", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.HasKey("MovieId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("directors", "public");
                });

            modelBuilder.Entity("webApplication.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int?>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.ToTable("movies", "public");
                });

            modelBuilder.Entity("webApplication.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int?>("Birth")
                        .HasColumnType("integer")
                        .HasColumnName("birth");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("people", "public");
                });

            modelBuilder.Entity("webApplication.Models.Rating", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<float>("RatingValue")
                        .HasColumnType("real")
                        .HasColumnName("rating");

                    b.Property<int>("Votes")
                        .HasColumnType("integer")
                        .HasColumnName("votes");

                    b.HasKey("MovieId");

                    b.ToTable("ratings", "public");
                });

            modelBuilder.Entity("webApplication.Models.Star", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.HasKey("MovieId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("stars", "public");
                });

            modelBuilder.Entity("webApplication.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("webApplication.Models.UserMovieList", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<char>("Type")
                        .HasColumnType("character(1)")
                        .HasColumnName("type");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("user_movie_list", "public");
                });

            modelBuilder.Entity("webApplication.Models.Director", b =>
                {
                    b.HasOne("webApplication.Models.Movie", "Movie")
                        .WithMany("Directors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webApplication.Models.Person", "Person")
                        .WithMany("DirectedMovies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("webApplication.Models.Rating", b =>
                {
                    b.HasOne("webApplication.Models.Movie", "Movie")
                        .WithOne("Rating")
                        .HasForeignKey("webApplication.Models.Rating", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("webApplication.Models.Star", b =>
                {
                    b.HasOne("webApplication.Models.Movie", "Movie")
                        .WithMany("Stars")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webApplication.Models.Person", "Person")
                        .WithMany("StarredMovies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("webApplication.Models.UserMovieList", b =>
                {
                    b.HasOne("webApplication.Models.Movie", "Movie")
                        .WithMany("UserFavoriteMovieList")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webApplication.Models.User", "User")
                        .WithMany("UserFavoriteMovieList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("webApplication.Models.Movie", b =>
                {
                    b.Navigation("Directors");

                    b.Navigation("Rating")
                        .IsRequired();

                    b.Navigation("Stars");

                    b.Navigation("UserFavoriteMovieList");
                });

            modelBuilder.Entity("webApplication.Models.Person", b =>
                {
                    b.Navigation("DirectedMovies");

                    b.Navigation("StarredMovies");
                });

            modelBuilder.Entity("webApplication.Models.User", b =>
                {
                    b.Navigation("UserFavoriteMovieList");
                });
#pragma warning restore 612, 618
        }
    }
}
